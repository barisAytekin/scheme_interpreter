(define get-operator (lambda (op-symbol)
    (cond
        ((equal? op-symbol '+) +)
        ((equal? op-symbol '-) -)
        ((equal? op-symbol '*) *)
        ((equal? op-symbol '/) /)
    )
    
))

(define define-stmt? (lambda (e)
    (and (list? e) (equal? (length e) 3) (equal? (car e) 'define) (symbol? (cadr e)) )
))
(define formal-list? (lambda (e)
   (or  (and (list? e) (null? e)) (and (list? e) (or (null? e) (symbol? (car e))  ) (formal-list? (cdr e))))
))
(define var-list? (lambda (e)
    (or (and (list? e) (null? e)) (and (list? e) (list? (car e)) (= 2 (length (car e) )) (not(null? e)) (list? (car e)) (not(null? (car e))) (symbol? (caar e) ) (var-list? (cdr e)) ) )
))
(define lambda-stmt? (lambda (e)
    (and (list? e) (equal? (length e) 3) (formal-list? (cadr e)) (equal? (car e) 'lambda) )
))
(define lambda-arg-stmt? (lambda (e)
    (and (list? e) (lambda-stmt? (car e)) (equal? (- (length e) 1) (length (cadar e))  )  )
))
(define lambda-def-stmt? (lambda (e)
    (and (list? e) (equal? (length e) 3) (list? (caddr e)) (equal? (car e) 'define) (equal? (caaddr e) 'lambda) )
))
(define if-stmt? (lambda (e)
    (and (list? e) (equal? (length e) 4) (list? (caddr e)) (equal? (car e) 'if) )
))
(define let-stmt? (lambda (e)
    (and (list? e) (equal? (car e) 'let) (var-list? (cadr e))  (equal? (length e) 3)) ;(not(null? (caadr e)))
))
(define operation? (lambda (e)
    (and (list? e) (or (equal? (car e) '+) (equal? (car e) '-) (equal? (car e) '/) (equal? (car e) '*)))
))
(define app? (lambda (e)
    (and (list? e) (equal? (length e) 2) (symbol? (car e)) (or (symbol? (cadr e)) (number? (cadr e))) (equal? (length e) 2))
))
(define get-value (lambda (var env)
    (cond
        ((null? env) "ERROR")
        ((equal? (caar env) var) (cdar env))
        (else (get-value var (cdr env)))
    )
))
(define error? (lambda (var)
    (cond
        ((equal? var "ERROR") #t)
        ((and (not(equal? var "ERROR")) (not (list? var))) #f)
        ((null? var) #f)
        ((equal? (car var) "ERROR") #t)
        (else (error? (cdr var)))
    )
))
;(define let-help (lambda (e env))
;    (if (not(null? (car e)))
;        (extend-env (caar e) (cadar e) env)
;    )
;)


;(define let-interpret (lambda (e env))
;    (let* 
    
; )
;  (if (not (let-stmt? e))
;       (disp "ERROR")
;        (let-help (cadr e) env)
;    )
;)

(define extend-env (lambda (var val old-env)
    (cons (cons var val) old-env)
))
(define repl (lambda (env)
    (let* 
        (
            (dummy1 (display "cs305> "))
            (expr (read))
            (new-env 
                (if (define-stmt? expr)
                (if (lambda-def-stmt? expr)
                    (extend-env (cadr expr) (caddr expr) env)
                    (extend-env (cadr expr) (s7 (caddr expr) env) env)
                )
                env)
            )
            (val 
                (if (define-stmt? expr)
                (cadr expr)
                (s7 expr env))
            )
            (dummy2 (display "cs305: "))
            (dummy3 (display val))
            (dummy4 (newline))
            (dummy4 (newline))
        )
        (repl new-env)
    )
))

(define s7 (lambda (e env)
    (cond
        ;((error? e)  "ERROR")
        ((number? e) e)
        ((symbol? e) (get-value e env))
        ((app? e)
            (let ((temp (get-value (car e) env)))
               (s7 (cons temp (cons (cadr e) '())) env)
            )
        )
        ((operation? e)
            (let 
                (
                    (operands (map s7 (cdr e) (make-list (length (cdr e)) env)))
                    (operator (get-operator (car e)))
                )
                (if(error? operands)
                    "ERROR"
                    (apply operator operands)
                
                )
            )
        )
        ((let-stmt? e)
        (let ((names (map car  (cadr e)))
                (ins (map cadr (cadr e))))

        (let ((val (map (lambda (par) (s7 par env)) ins)))

        (let ((new-env (append (map cons names val) env)))

        (s7 (caddr e) new-env)))))
        ((if-stmt? e)
            (if (equal? (s7 (cadr e) env) 0) 
                (s7 (cadddr e) env)
                (s7 (caddr e) env)
            )
        )
        ((lambda-arg-stmt? e) 
        (let((new-env (map cons (cadar e) (map s7 (cdr e) (make-list (length (cdr e)) env)) ))) ;(make-list (length (cdr e)) env)
            (s7 (caddar e) (append new-env env))
        ))
        ((lambda-stmt? e) 
        (let((new-env (map cons (cadar e) (cdr e) )))
            (s7 (caddar e) new-env)
        ))
        (else
            "ERROR"
        )
    )
))

(define scm_interpret (lambda () (repl '())))